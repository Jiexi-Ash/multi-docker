# Main Nginx Reverse Proxy Configuration
# This configuration handles routing between the frontend, backend, and WebSocket connections
# It acts as the main entry point for all traffic to the application

# Define upstream servers for service discovery and load balancing
# These are the internal service names that Docker Compose creates
upstream client {
    server client:3000; # Frontend React application running on port 3000
}

upstream api {
    server api:5000; # Backend API service running on port 5000
}

# Main server configuration block
server {
    listen 80; # Listen on port 80 for all incoming HTTP requests

    # Global WebSocket and proxy settings
    # These settings are applied to all location blocks
    proxy_http_version 1.1; # Required for WebSocket support
    proxy_set_header Upgrade $http_upgrade; # Enables WebSocket protocol upgrade
    proxy_set_header Connection "upgrade"; # Maintains WebSocket connection
    proxy_set_header Host $host; # Preserves the original host header
    proxy_cache_bypass $http_upgrade; # Prevents caching of WebSocket connections

    # Frontend routing - handles all requests to the root path
    # This is where the React application is served
    location / {
        proxy_pass http://client; # Forwards requests to the React application
    }

    # WebSocket routing - handles hot reloading and real-time updates
    # This is crucial for development environment
    location /ws {
        proxy_pass http://client; # Forwards WebSocket connections to React dev server
    }

    # API routing - handles all backend requests
    # Removes the /api prefix before forwarding to the backend
    location /api {
        rewrite /api/(.*) /$1 break; # Strips /api from the URL before forwarding
        proxy_pass http://api; # Forwards requests to the backend API service
    }
}

