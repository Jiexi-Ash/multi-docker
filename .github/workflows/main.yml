# GitHub Actions Workflow for Complex Application
# This workflow automates the build, test, and deployment process
# It runs whenever code is pushed to the master branch

name: Deploy MultiDocker

# Define when this workflow should run
on:
  push:
    branches:
      - main  # Trigger on pushes to master branch

# Define the jobs to run
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Checkout the repository code
      - uses: actions/checkout@v3  # Use the latest stable version of checkout action

      # Login to Docker Hub using secrets
      # These secrets should be configured in your GitHub repository settings
      - run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the React application using the development Dockerfile
      # This creates a Docker image for testing
      - run: docker build -t lancem/react-test -f ./client/Dockerfile.dev ./client

      # Run the test suite inside the Docker container
      # CI=true ensures the tests run in CI mode
      - run: docker run -e CI=true lancem/react-test npm test

      - run: docker build -t lancem/multiclient ./client
      - run: docker build -t lancem/multi-nginx ./nginx
      - run: docker build -t lancem/multi-server ./server
      - run: docker build -t lancem/multi-worker ./worker

      # Create a deployment package
      # This zips all files except git-related ones
      # The package can be used for deployment to a server
      - name: Generate deployment package 
        run: zip -r deploy.zip . -x '*.git*' 
      